%======================================================================
%> @file NN_training_multtrials.m
%> @brief Script to train NN on large dataset
%> @example
%> @details
%> %The following code is used to train a NN model on the LG data of three birds
%(The set of birds varies, depending on which training and validation 
%dataset is loaded). A fourth bird was reserved for testing the NN and 
%1 trial was excluded from each 'training' bird, again for the purposes 
%of testing.
%======================================================================

% ======================================================================
%> @brief Script to train NN on large dataset
%>
%> @param   trainingDtaFilename     The name of the data file which was
%>                                  generated by createDataset.m and
%>                                  follows the naming format
%>                                  '<nameOfExcludedBird>_<obstacleHeight>_<speed>_dataTrainValidation.mat'
% ======================================================================

function NN_training_multtrials(trainingDtaFilename)

    %% Check path
    filenamePath=mfilename('fullpath');
    filePath =[fileparts(filenamePath) filesep '..' filesep];
    addpath(genpath(filePath)) %Change this to the folder where you downloaded this code
    
    %% Settings
    %Write here the location of the data
    
    folder_base = '/path/to/NN_Data/';
    
    
    %% Load data
    % Provide the name of the datafile, generated by createDataset.m
    trainingData=[filePath 'data' filesep trainingDtaFilename]; 
    load(trainingData); %If the file(s) do not yet exist, please run createDataset.m once first
    
    pStruct = paramStruct;
    
    %% Network normalization to have 0 mean and std of 1 using only training data
    %find the mean and stDev of the variables of the training and validation data (80-20) partitions
    data_mean.lce = mean(lcetrain_all);
    data_std.lce  = std(lcetrain_all);
    
    data_mean.vce = mean(vcetrain_all);
    data_std.vce  = std(vcetrain_all);
    
    data_mean.EMG = mean(EMGtrain_all);
    data_std.EMG  = std(EMGtrain_all);
    
    data_mean.force = mean(Forcetrain_all, 'omitnan');
    data_std.force  = std(Forcetrain_all, 'omitnan');
    
    
    lcetrain_norm = doDataNormalization(lcetrain_all, data_mean.lce,data_std.lce);
    vcetrain_norm = doDataNormalization(vcetrain_all, data_mean.vce,data_std.vce);
    EMGtrain_norm = EMGtrain_all; 
    Forcetrain_norm = doDataNormalization(Forcetrain_all, data_mean.force,data_std.force);
    
    lceval_norm = doDataNormalization(lceval_all, data_mean.lce,data_std.lce);
    vceval_norm = doDataNormalization(vceval_all, data_mean.vce,data_std.vce);
    EMGval_norm = EMGval_all; 
    Forceval_norm = doDataNormalization(Forceval_all, data_mean.force,data_std.force);
    
    %% Define training and testing dataset
    %Inputs
    Xtrain = [lcetrain_norm vcetrain_norm EMGtrain_norm];
    %Outputs
    Ytrain = Forcetrain_norm;
    
    %Inputs
    Xval = [lceval_norm vceval_norm EMGval_norm];
    %Outputs
    Yval = Forceval_norm;
    
    %% Training with hyperparameter optimization
    rng("default") % For reproducibility
    
    for i = 1:5 %Repeat five times
        res(i).Mdl = fitrnet(Xtrain, Ytrain,'OptimizeHyperparameters', 'auto', "HyperparameterOptimizationOptions", struct("MaxObjectiveEvaluations", 100),"ValidationData", {Xval, Yval});
        lossMdl(i) = res(i).Mdl.HyperparameterOptimizationResults.MinObjective;
    end
    [~,iMin] = min(lossMdl); %Find lowest objective
    Mdl = res(iMin).Mdl;
    
    testMSE = loss(Mdl,Xval,Yval);
    trainMSE = loss(Mdl,Xtrain,Ytrain);
    
    %% Plot training data
    iteration = Mdl.TrainingHistory.Iteration;
    trainLosses = Mdl.TrainingHistory.TrainingLoss;
    valLosses = Mdl.TrainingHistory.ValidationLoss;
    plot(iteration,trainLosses,iteration,valLosses)
    
    legend(["Training","Validation"])
    xlabel("Iteration")
    ylabel("Mean Squared Error")
    %------------------------------------
    
    %% Save model, normalization info and other NN parameters (pStruct)
    NN.Mdl = Mdl;
    NN.data_mean = data_mean;
    NN.data_std = data_std;

    pattern='.{0,3}(?=_all).*?all.*?all';
    out = regexp(trainingData, pattern, 'match');

    saveAs = [filePath out{1,1} '_network.mat']; %naming convension: nameOfExcludedBird_obstacleHeight_speed_...
    save(saveAs, 'NN', 'pStruct', 'res', 'lossMdl');

end